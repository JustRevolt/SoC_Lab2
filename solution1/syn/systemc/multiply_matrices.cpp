// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multiply_matrices.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multiply_matrices::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multiply_matrices::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> multiply_matrices::ap_ST_fsm_state1 = "1";
const sc_lv<6> multiply_matrices::ap_ST_fsm_state2 = "10";
const sc_lv<6> multiply_matrices::ap_ST_fsm_state3 = "100";
const sc_lv<6> multiply_matrices::ap_ST_fsm_state4 = "1000";
const sc_lv<6> multiply_matrices::ap_ST_fsm_state5 = "10000";
const sc_lv<6> multiply_matrices::ap_ST_fsm_state6 = "100000";
const sc_lv<32> multiply_matrices::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> multiply_matrices::ap_const_lv1_1 = "1";
const sc_lv<32> multiply_matrices::ap_const_lv32_1 = "1";
const sc_lv<1> multiply_matrices::ap_const_lv1_0 = "0";
const sc_lv<32> multiply_matrices::ap_const_lv32_2 = "10";
const sc_lv<32> multiply_matrices::ap_const_lv32_3 = "11";
const sc_lv<32> multiply_matrices::ap_const_lv32_4 = "100";
const sc_lv<32> multiply_matrices::ap_const_lv32_5 = "101";
const sc_lv<4> multiply_matrices::ap_const_lv4_0 = "0000";
const sc_lv<16> multiply_matrices::ap_const_lv16_0 = "0000000000000000";
const sc_lv<7> multiply_matrices::ap_const_lv7_0 = "0000000";
const sc_lv<16> multiply_matrices::ap_const_lv16_4 = "100";
const sc_lv<16> multiply_matrices::ap_const_lv16_B = "1011";
const sc_lv<4> multiply_matrices::ap_const_lv4_1 = "1";
const bool multiply_matrices::ap_const_boolean_1 = true;

multiply_matrices::multiply_matrices(sc_module_name name) : sc_module(name), mVcdFile(0) {
    multiply_matricesbkb_U1 = new multiply_matricesbkb<1,1,16,16,16,16>("multiply_matricesbkb_U1");
    multiply_matricesbkb_U1->din0(a_load_reg_342);
    multiply_matricesbkb_U1->din1(b_load_reg_347);
    multiply_matricesbkb_U1->din2(acc_0_reg_126);
    multiply_matricesbkb_U1->dout(grp_fu_268_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln18_fu_239_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_add_ln18_1_fu_249_p2);
    sensitive << ( zext_ln15_1_reg_305 );
    sensitive << ( phi_mul_reg_139 );

    SC_METHOD(thread_add_ln18_2_fu_244_p2);
    sensitive << ( trunc_ln18_reg_285 );
    sensitive << ( phi_mul_reg_139 );

    SC_METHOD(thread_add_ln18_fu_234_p2);
    sensitive << ( mul_ln18_reg_299 );
    sensitive << ( zext_ln17_1_fu_219_p1 );

    SC_METHOD(thread_add_ln20_fu_259_p2);
    sensitive << ( mul_ln18_reg_299 );
    sensitive << ( zext_ln15_1_reg_305 );

    SC_METHOD(thread_and_ln13_fu_162_p2);
    sensitive << ( icmp_ln13_fu_150_p2 );
    sensitive << ( icmp_ln13_1_fu_156_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( and_ln13_reg_281 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln14_fu_176_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( and_ln13_reg_281 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln14_fu_176_p2 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln18_1_fu_254_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln20_fu_263_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_c_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( acc_0_reg_126 );

    SC_METHOD(thread_c_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln17_fu_223_p2 );

    SC_METHOD(thread_i_fu_181_p2);
    sensitive << ( i_0_reg_93 );

    SC_METHOD(thread_icmp_ln13_1_fu_156_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n );

    SC_METHOD(thread_icmp_ln13_fu_150_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( n );

    SC_METHOD(thread_icmp_ln14_fu_176_p2);
    sensitive << ( n );
    sensitive << ( and_ln13_reg_281 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln14_fu_172_p1 );

    SC_METHOD(thread_icmp_ln15_fu_204_p2);
    sensitive << ( n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln15_fu_196_p1 );

    SC_METHOD(thread_icmp_ln17_fu_223_p2);
    sensitive << ( n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln17_fu_215_p1 );

    SC_METHOD(thread_j_fu_209_p2);
    sensitive << ( j_0_reg_104 );

    SC_METHOD(thread_k_fu_228_p2);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_mul_ln18_fu_191_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( mul_ln18_fu_191_p00 );

    SC_METHOD(thread_mul_ln18_fu_191_p00);
    sensitive << ( i_0_reg_93 );

    SC_METHOD(thread_mul_ln18_fu_191_p2);
    sensitive << ( trunc_ln18_reg_285 );
    sensitive << ( mul_ln18_fu_191_p0 );

    SC_METHOD(thread_trunc_ln18_fu_168_p1);
    sensitive << ( n );

    SC_METHOD(thread_zext_ln14_fu_172_p1);
    sensitive << ( i_0_reg_93 );

    SC_METHOD(thread_zext_ln15_1_fu_200_p1);
    sensitive << ( j_0_reg_104 );

    SC_METHOD(thread_zext_ln15_fu_196_p1);
    sensitive << ( j_0_reg_104 );

    SC_METHOD(thread_zext_ln17_1_fu_219_p1);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_zext_ln17_fu_215_p1);
    sensitive << ( k_0_reg_115 );

    SC_METHOD(thread_zext_ln18_1_fu_254_p1);
    sensitive << ( add_ln18_1_fu_249_p2 );

    SC_METHOD(thread_zext_ln18_fu_239_p1);
    sensitive << ( add_ln18_fu_234_p2 );

    SC_METHOD(thread_zext_ln20_fu_263_p1);
    sensitive << ( add_ln20_fu_259_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln13_reg_281 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln14_fu_176_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln17_fu_223_p2 );
    sensitive << ( icmp_ln15_fu_204_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multiply_matrices_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, n, "(port)n");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_we0, "(port)c_we0");
    sc_trace(mVcdFile, c_d0, "(port)c_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, and_ln13_fu_162_p2, "and_ln13_fu_162_p2");
    sc_trace(mVcdFile, and_ln13_reg_281, "and_ln13_reg_281");
    sc_trace(mVcdFile, trunc_ln18_fu_168_p1, "trunc_ln18_fu_168_p1");
    sc_trace(mVcdFile, trunc_ln18_reg_285, "trunc_ln18_reg_285");
    sc_trace(mVcdFile, i_fu_181_p2, "i_fu_181_p2");
    sc_trace(mVcdFile, i_reg_294, "i_reg_294");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, mul_ln18_fu_191_p2, "mul_ln18_fu_191_p2");
    sc_trace(mVcdFile, mul_ln18_reg_299, "mul_ln18_reg_299");
    sc_trace(mVcdFile, icmp_ln14_fu_176_p2, "icmp_ln14_fu_176_p2");
    sc_trace(mVcdFile, zext_ln15_1_fu_200_p1, "zext_ln15_1_fu_200_p1");
    sc_trace(mVcdFile, zext_ln15_1_reg_305, "zext_ln15_1_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_fu_209_p2, "j_fu_209_p2");
    sc_trace(mVcdFile, j_reg_314, "j_reg_314");
    sc_trace(mVcdFile, k_fu_228_p2, "k_fu_228_p2");
    sc_trace(mVcdFile, k_reg_322, "k_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln17_fu_223_p2, "icmp_ln17_fu_223_p2");
    sc_trace(mVcdFile, add_ln18_2_fu_244_p2, "add_ln18_2_fu_244_p2");
    sc_trace(mVcdFile, add_ln18_2_reg_332, "add_ln18_2_reg_332");
    sc_trace(mVcdFile, a_load_reg_342, "a_load_reg_342");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, b_load_reg_347, "b_load_reg_347");
    sc_trace(mVcdFile, grp_fu_268_p3, "grp_fu_268_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_0_reg_93, "i_0_reg_93");
    sc_trace(mVcdFile, icmp_ln15_fu_204_p2, "icmp_ln15_fu_204_p2");
    sc_trace(mVcdFile, j_0_reg_104, "j_0_reg_104");
    sc_trace(mVcdFile, k_0_reg_115, "k_0_reg_115");
    sc_trace(mVcdFile, acc_0_reg_126, "acc_0_reg_126");
    sc_trace(mVcdFile, phi_mul_reg_139, "phi_mul_reg_139");
    sc_trace(mVcdFile, zext_ln18_fu_239_p1, "zext_ln18_fu_239_p1");
    sc_trace(mVcdFile, zext_ln18_1_fu_254_p1, "zext_ln18_1_fu_254_p1");
    sc_trace(mVcdFile, zext_ln20_fu_263_p1, "zext_ln20_fu_263_p1");
    sc_trace(mVcdFile, icmp_ln13_fu_150_p2, "icmp_ln13_fu_150_p2");
    sc_trace(mVcdFile, icmp_ln13_1_fu_156_p2, "icmp_ln13_1_fu_156_p2");
    sc_trace(mVcdFile, zext_ln14_fu_172_p1, "zext_ln14_fu_172_p1");
    sc_trace(mVcdFile, mul_ln18_fu_191_p0, "mul_ln18_fu_191_p0");
    sc_trace(mVcdFile, zext_ln15_fu_196_p1, "zext_ln15_fu_196_p1");
    sc_trace(mVcdFile, zext_ln17_fu_215_p1, "zext_ln17_fu_215_p1");
    sc_trace(mVcdFile, zext_ln17_1_fu_219_p1, "zext_ln17_1_fu_219_p1");
    sc_trace(mVcdFile, add_ln18_fu_234_p2, "add_ln18_fu_234_p2");
    sc_trace(mVcdFile, add_ln18_1_fu_249_p2, "add_ln18_1_fu_249_p2");
    sc_trace(mVcdFile, add_ln20_fu_259_p2, "add_ln20_fu_259_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_ln18_fu_191_p00, "mul_ln18_fu_191_p00");
#endif

    }
    mHdltvinHandle.open("multiply_matrices.hdltvin.dat");
    mHdltvoutHandle.open("multiply_matrices.hdltvout.dat");
}

multiply_matrices::~multiply_matrices() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete multiply_matricesbkb_U1;
}

void multiply_matrices::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        acc_0_reg_126 = grp_fu_268_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_204_p2.read()))) {
        acc_0_reg_126 = ap_const_lv16_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(and_ln13_fu_162_p2.read(), ap_const_lv1_1))) {
        i_0_reg_93 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln15_fu_204_p2.read()))) {
        i_0_reg_93 = i_reg_294.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln17_fu_223_p2.read()))) {
        j_0_reg_104 = j_reg_314.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(and_ln13_reg_281.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(icmp_ln14_fu_176_p2.read(), ap_const_lv1_0))) {
        j_0_reg_104 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        k_0_reg_115 = k_reg_322.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_204_p2.read()))) {
        k_0_reg_115 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        phi_mul_reg_139 = add_ln18_2_reg_332.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln15_fu_204_p2.read()))) {
        phi_mul_reg_139 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        a_load_reg_342 = a_q0.read();
        b_load_reg_347 = b_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_223_p2.read()))) {
        add_ln18_2_reg_332 = add_ln18_2_fu_244_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        and_ln13_reg_281 = and_ln13_fu_162_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(and_ln13_reg_281.read(), ap_const_lv1_1))) {
        i_reg_294 = i_fu_181_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_314 = j_fu_209_p2.read();
        zext_ln15_1_reg_305 = zext_ln15_1_fu_200_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_322 = k_fu_228_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(and_ln13_reg_281.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_ln14_fu_176_p2.read(), ap_const_lv1_0))) {
        mul_ln18_reg_299 = mul_ln18_fu_191_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(and_ln13_fu_162_p2.read(), ap_const_lv1_1))) {
        trunc_ln18_reg_285 = trunc_ln18_fu_168_p1.read();
    }
}

void multiply_matrices::thread_a_address0() {
    a_address0 =  (sc_lv<7>) (zext_ln18_fu_239_p1.read());
}

void multiply_matrices::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void multiply_matrices::thread_add_ln18_1_fu_249_p2() {
    add_ln18_1_fu_249_p2 = (!phi_mul_reg_139.read().is_01() || !zext_ln15_1_reg_305.read().is_01())? sc_lv<7>(): (sc_biguint<7>(phi_mul_reg_139.read()) + sc_biguint<7>(zext_ln15_1_reg_305.read()));
}

void multiply_matrices::thread_add_ln18_2_fu_244_p2() {
    add_ln18_2_fu_244_p2 = (!phi_mul_reg_139.read().is_01() || !trunc_ln18_reg_285.read().is_01())? sc_lv<7>(): (sc_biguint<7>(phi_mul_reg_139.read()) + sc_bigint<7>(trunc_ln18_reg_285.read()));
}

void multiply_matrices::thread_add_ln18_fu_234_p2() {
    add_ln18_fu_234_p2 = (!mul_ln18_reg_299.read().is_01() || !zext_ln17_1_fu_219_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(mul_ln18_reg_299.read()) + sc_biguint<7>(zext_ln17_1_fu_219_p1.read()));
}

void multiply_matrices::thread_add_ln20_fu_259_p2() {
    add_ln20_fu_259_p2 = (!mul_ln18_reg_299.read().is_01() || !zext_ln15_1_reg_305.read().is_01())? sc_lv<7>(): (sc_biguint<7>(mul_ln18_reg_299.read()) + sc_biguint<7>(zext_ln15_1_reg_305.read()));
}

void multiply_matrices::thread_and_ln13_fu_162_p2() {
    and_ln13_fu_162_p2 = (icmp_ln13_fu_150_p2.read() & icmp_ln13_1_fu_156_p2.read());
}

void multiply_matrices::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void multiply_matrices::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void multiply_matrices::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void multiply_matrices::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void multiply_matrices::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void multiply_matrices::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void multiply_matrices::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_176_p2.read()) || 
          esl_seteq<1,1,1>(and_ln13_reg_281.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void multiply_matrices::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void multiply_matrices::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_176_p2.read()) || 
          esl_seteq<1,1,1>(and_ln13_reg_281.read(), ap_const_lv1_0)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void multiply_matrices::thread_b_address0() {
    b_address0 =  (sc_lv<7>) (zext_ln18_1_fu_254_p1.read());
}

void multiply_matrices::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void multiply_matrices::thread_c_address0() {
    c_address0 =  (sc_lv<7>) (zext_ln20_fu_263_p1.read());
}

void multiply_matrices::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void multiply_matrices::thread_c_d0() {
    c_d0 = acc_0_reg_126.read();
}

void multiply_matrices::thread_c_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln17_fu_223_p2.read()))) {
        c_we0 = ap_const_logic_1;
    } else {
        c_we0 = ap_const_logic_0;
    }
}

void multiply_matrices::thread_i_fu_181_p2() {
    i_fu_181_p2 = (!i_0_reg_93.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_93.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void multiply_matrices::thread_icmp_ln13_1_fu_156_p2() {
    icmp_ln13_1_fu_156_p2 = (!n.read().is_01() || !ap_const_lv16_B.is_01())? sc_lv<1>(): (sc_bigint<16>(n.read()) < sc_bigint<16>(ap_const_lv16_B));
}

void multiply_matrices::thread_icmp_ln13_fu_150_p2() {
    icmp_ln13_fu_150_p2 = (!n.read().is_01() || !ap_const_lv16_4.is_01())? sc_lv<1>(): (sc_bigint<16>(n.read()) > sc_bigint<16>(ap_const_lv16_4));
}

void multiply_matrices::thread_icmp_ln14_fu_176_p2() {
    icmp_ln14_fu_176_p2 = (!zext_ln14_fu_172_p1.read().is_01() || !n.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln14_fu_172_p1.read() == n.read());
}

void multiply_matrices::thread_icmp_ln15_fu_204_p2() {
    icmp_ln15_fu_204_p2 = (!zext_ln15_fu_196_p1.read().is_01() || !n.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln15_fu_196_p1.read() == n.read());
}

void multiply_matrices::thread_icmp_ln17_fu_223_p2() {
    icmp_ln17_fu_223_p2 = (!zext_ln17_fu_215_p1.read().is_01() || !n.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln17_fu_215_p1.read() == n.read());
}

void multiply_matrices::thread_j_fu_209_p2() {
    j_fu_209_p2 = (!j_0_reg_104.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_104.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void multiply_matrices::thread_k_fu_228_p2() {
    k_fu_228_p2 = (!k_0_reg_115.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(k_0_reg_115.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void multiply_matrices::thread_mul_ln18_fu_191_p0() {
    mul_ln18_fu_191_p0 =  (sc_lv<4>) (mul_ln18_fu_191_p00.read());
}

void multiply_matrices::thread_mul_ln18_fu_191_p00() {
    mul_ln18_fu_191_p00 = esl_zext<7,4>(i_0_reg_93.read());
}

void multiply_matrices::thread_mul_ln18_fu_191_p2() {
    mul_ln18_fu_191_p2 = (!mul_ln18_fu_191_p0.read().is_01() || !trunc_ln18_reg_285.read().is_01())? sc_lv<7>(): sc_biguint<4>(mul_ln18_fu_191_p0.read()) * sc_bigint<7>(trunc_ln18_reg_285.read());
}

void multiply_matrices::thread_trunc_ln18_fu_168_p1() {
    trunc_ln18_fu_168_p1 = n.read().range(7-1, 0);
}

void multiply_matrices::thread_zext_ln14_fu_172_p1() {
    zext_ln14_fu_172_p1 = esl_zext<16,4>(i_0_reg_93.read());
}

void multiply_matrices::thread_zext_ln15_1_fu_200_p1() {
    zext_ln15_1_fu_200_p1 = esl_zext<7,4>(j_0_reg_104.read());
}

void multiply_matrices::thread_zext_ln15_fu_196_p1() {
    zext_ln15_fu_196_p1 = esl_zext<16,4>(j_0_reg_104.read());
}

void multiply_matrices::thread_zext_ln17_1_fu_219_p1() {
    zext_ln17_1_fu_219_p1 = esl_zext<7,4>(k_0_reg_115.read());
}

void multiply_matrices::thread_zext_ln17_fu_215_p1() {
    zext_ln17_fu_215_p1 = esl_zext<16,4>(k_0_reg_115.read());
}

void multiply_matrices::thread_zext_ln18_1_fu_254_p1() {
    zext_ln18_1_fu_254_p1 = esl_zext<64,7>(add_ln18_1_fu_249_p2.read());
}

void multiply_matrices::thread_zext_ln18_fu_239_p1() {
    zext_ln18_fu_239_p1 = esl_zext<64,7>(add_ln18_fu_234_p2.read());
}

void multiply_matrices::thread_zext_ln20_fu_263_p1() {
    zext_ln20_fu_263_p1 = esl_zext<64,7>(add_ln20_fu_259_p2.read());
}

void multiply_matrices::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln14_fu_176_p2.read()) || 
  esl_seteq<1,1,1>(and_ln13_reg_281.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln15_fu_204_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln17_fu_223_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void multiply_matrices::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"n\" :  \"" << n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_we0\" :  \"" << c_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_d0\" :  \"" << c_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

