// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiply_matrices,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.180000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=111,HLS_SYN_LUT=282,HLS_VERSION=2019_1}" *)

module multiply_matrices (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] n;
output  [6:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [6:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [6:0] c_address0;
output   c_ce0;
output   c_we0;
output  [15:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] and_ln13_fu_162_p2;
reg   [0:0] and_ln13_reg_281;
wire  signed [6:0] trunc_ln18_fu_168_p1;
reg  signed [6:0] trunc_ln18_reg_285;
wire   [3:0] i_fu_181_p2;
reg   [3:0] i_reg_294;
wire    ap_CS_fsm_state2;
wire   [6:0] mul_ln18_fu_191_p2;
reg   [6:0] mul_ln18_reg_299;
wire   [0:0] icmp_ln14_fu_176_p2;
wire   [6:0] zext_ln15_1_fu_200_p1;
reg   [6:0] zext_ln15_1_reg_305;
wire    ap_CS_fsm_state3;
wire   [3:0] j_fu_209_p2;
reg   [3:0] j_reg_314;
wire   [3:0] k_fu_228_p2;
reg   [3:0] k_reg_322;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln17_fu_223_p2;
wire   [6:0] add_ln18_2_fu_244_p2;
reg   [6:0] add_ln18_2_reg_332;
reg  signed [15:0] a_load_reg_342;
wire    ap_CS_fsm_state5;
reg  signed [15:0] b_load_reg_347;
wire  signed [15:0] grp_fu_268_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] i_0_reg_93;
wire   [0:0] icmp_ln15_fu_204_p2;
reg   [3:0] j_0_reg_104;
reg   [3:0] k_0_reg_115;
reg   [15:0] acc_0_reg_126;
reg   [6:0] phi_mul_reg_139;
wire   [63:0] zext_ln18_fu_239_p1;
wire   [63:0] zext_ln18_1_fu_254_p1;
wire   [63:0] zext_ln20_fu_263_p1;
wire   [0:0] icmp_ln13_fu_150_p2;
wire   [0:0] icmp_ln13_1_fu_156_p2;
wire   [15:0] zext_ln14_fu_172_p1;
wire   [3:0] mul_ln18_fu_191_p0;
wire   [15:0] zext_ln15_fu_196_p1;
wire   [15:0] zext_ln17_fu_215_p1;
wire   [6:0] zext_ln17_1_fu_219_p1;
wire   [6:0] add_ln18_fu_234_p2;
wire   [6:0] add_ln18_1_fu_249_p2;
wire   [6:0] add_ln20_fu_259_p2;
reg   [5:0] ap_NS_fsm;
wire   [6:0] mul_ln18_fu_191_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

multiply_matricesbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
multiply_matricesbkb_U1(
    .din0(a_load_reg_342),
    .din1(b_load_reg_347),
    .din2(acc_0_reg_126),
    .dout(grp_fu_268_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        acc_0_reg_126 <= grp_fu_268_p3;
    end else if (((icmp_ln15_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_0_reg_126 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln13_fu_162_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_93 <= 4'd0;
    end else if (((icmp_ln15_fu_204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_93 <= i_reg_294;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_104 <= j_reg_314;
    end else if (((icmp_ln14_fu_176_p2 == 1'd0) & (1'd1 == and_ln13_reg_281) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_104 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_0_reg_115 <= k_reg_322;
    end else if (((icmp_ln15_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_115 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_mul_reg_139 <= add_ln18_2_reg_332;
    end else if (((icmp_ln15_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_139 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_load_reg_342 <= a_q0;
        b_load_reg_347 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln18_2_reg_332 <= add_ln18_2_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        and_ln13_reg_281 <= and_ln13_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln13_reg_281) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_294 <= i_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_314 <= j_fu_209_p2;
        zext_ln15_1_reg_305[3 : 0] <= zext_ln15_1_fu_200_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_322 <= k_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_176_p2 == 1'd0) & (1'd1 == and_ln13_reg_281) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln18_reg_299 <= mul_ln18_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln13_fu_162_p2) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln18_reg_285 <= trunc_ln18_fu_168_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln14_fu_176_p2 == 1'd1) | (1'd0 == and_ln13_reg_281)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln14_fu_176_p2 == 1'd1) | (1'd0 == and_ln13_reg_281)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln14_fu_176_p2 == 1'd1) | (1'd0 == and_ln13_reg_281)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln15_fu_204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln17_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln18_fu_239_p1;

assign add_ln18_1_fu_249_p2 = (phi_mul_reg_139 + zext_ln15_1_reg_305);

assign add_ln18_2_fu_244_p2 = ($signed(phi_mul_reg_139) + $signed(trunc_ln18_reg_285));

assign add_ln18_fu_234_p2 = (mul_ln18_reg_299 + zext_ln17_1_fu_219_p1);

assign add_ln20_fu_259_p2 = (mul_ln18_reg_299 + zext_ln15_1_reg_305);

assign and_ln13_fu_162_p2 = (icmp_ln13_fu_150_p2 & icmp_ln13_1_fu_156_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_address0 = zext_ln18_1_fu_254_p1;

assign c_address0 = zext_ln20_fu_263_p1;

assign c_d0 = acc_0_reg_126;

assign i_fu_181_p2 = (i_0_reg_93 + 4'd1);

assign icmp_ln13_1_fu_156_p2 = (($signed(n) < $signed(16'd11)) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_150_p2 = (($signed(n) > $signed(16'd4)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_176_p2 = ((zext_ln14_fu_172_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_204_p2 = ((zext_ln15_fu_196_p1 == n) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_223_p2 = ((zext_ln17_fu_215_p1 == n) ? 1'b1 : 1'b0);

assign j_fu_209_p2 = (j_0_reg_104 + 4'd1);

assign k_fu_228_p2 = (k_0_reg_115 + 4'd1);

assign mul_ln18_fu_191_p0 = mul_ln18_fu_191_p00;

assign mul_ln18_fu_191_p00 = i_0_reg_93;

assign mul_ln18_fu_191_p2 = ($signed({{1'b0}, {mul_ln18_fu_191_p0}}) * $signed(trunc_ln18_reg_285));

assign trunc_ln18_fu_168_p1 = n[6:0];

assign zext_ln14_fu_172_p1 = i_0_reg_93;

assign zext_ln15_1_fu_200_p1 = j_0_reg_104;

assign zext_ln15_fu_196_p1 = j_0_reg_104;

assign zext_ln17_1_fu_219_p1 = k_0_reg_115;

assign zext_ln17_fu_215_p1 = k_0_reg_115;

assign zext_ln18_1_fu_254_p1 = add_ln18_1_fu_249_p2;

assign zext_ln18_fu_239_p1 = add_ln18_fu_234_p2;

assign zext_ln20_fu_263_p1 = add_ln20_fu_259_p2;

always @ (posedge ap_clk) begin
    zext_ln15_1_reg_305[6:4] <= 3'b000;
end

endmodule //multiply_matrices
